// @flow
import type { Dispatch } from 'redux'
import type { Event, Validator } from './types'
import * as React from 'react'

export type Props = {
  name: string,
  component: React.ComponentType<*> | Function | string,
  format?: ?(value: any, name: string) => ?string,
  normalize?: (
    value: any,
    previousValue: any,
    allValues: Object,
    previousAllValues: Object
  ) => ?any,
  onBlur?: (event: Event, newValue: any, previousValue: any, name: string) => void,
  onChange?: (event: Event, newValue: any, previousValue: any, name: string) => void,
  onDragStart?: (event: Event, name: string) => void,
  onDrop?: (event: Event, newValue: any, previousValue: any, name: string) => void,
  onFocus?: (event: Event, name: string) => void,
  parse?: (value: any, name: string) => any,
  props?: Object,
  validate?: Validator | Validator[],
  warn?: Validator | Validator[],
  withRef?: boolean,
  immutableProps?: Array<string>
}

export type InputProps = {
  checked?: boolean,
  name: string,
  onBlur: { (eventOrValue: Event | any): void },
  onChange: { (eventOrValue: Event | any): void },
  onDrop: { (event: Event): void },
  onDragStart: { (event: Event): void },
  onFocus: { (event: Event): void },
  value: any
}

export type FieldProps = {
  input: InputProps,
  meta: {
    active: boolean,
    asyncValidating: boolean,
    autofilled: boolean,
    dirty: boolean,
    dispatch: Dispatch<*>,
    error?: any,
    form: string,
    initial?: any,
    invalid: boolean,
    pristine: boolean,
    submitting: boolean,
    submitFailed: boolean,
    touched: boolean,
    valid: boolean,
    visited: boolean,
    warning?: any
  },
  custom: {
    ref?: (ref: React.ElementRef<*>) => React.ElementRef<*>
  }
}
