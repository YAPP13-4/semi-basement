// @flow
import * as React from 'react'
import type { Context } from './types'

export type Props = {
  name: string,
  children?: React.Node,
  component: Function | string,
  withRef?: boolean,
  _reduxForm: Context,
  rerenderOnEveryChange?: boolean,
  validate?: { (value: any, allValues: Object, props: Object): any },
  warn?: { (value: any, allValues: Object, props: Object): any },

  // same as Props in createFieldArrayProps.js:
  arrayInsert: { (index: number, value: any): void },
  arrayMove: { (from: number, to: number): void },
  arrayPop: { (): any },
  arrayPush: { (value: any): void },
  arrayRemove: { (index: number): void },
  arrayRemoveAll: { (): void },
  arrayShift: { (): any },
  arraySplice: { (index: number, removeNum: number | null, value: any): void },
  arraySwap: { (from: number, to: number): void },
  arrayUnshift: { (value: any): void },
  asyncError: any,
  dirty: boolean,
  length: number,
  pristine: boolean,
  submitError: any,
  state: Object,
  submitFailed: boolean,
  submitting: boolean,
  syncError: any,
  syncWarning: any,
  value: any[],
  props?: Object
}

export type DefaultProps = {
  rerenderOnEveryChange: boolean
}

type Api = {
  dirty: boolean,
  getRenderedComponent: { (): React.Component<*, *> },
  pristine: boolean,
  value: ?(any[])
}

export type InstanceApi = Api & React.Component<Props, void>
